{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.dev/api';\n    this._extractId = item => {\n      const idRegExp = /\\/([0-9]*)\\/$/;\n      const id = planet.url.match(idRegexp)[1];\n    };\n    this._transformPlanet = planet => {\n      return {\n        id: this._extractId(planet),\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n    this._transformStarship = starship => {\n      return {\n        id: this._extractId(starship),\n        name: starship.name,\n        model: starship.model,\n        manufacturer: starship.manufacturer,\n        costInCredits: starship.costInCredits,\n        length: starship.length,\n        crew: starship.crew,\n        passengers: starship.passengers,\n        cargoCapacity: starship.cargoCapacity\n      };\n    };\n    this._transformPerson = person => {\n      return {\n        id: this._extractId(person),\n        name: person.name,\n        gender: person.gender,\n        birthYear: person.birthYear,\n        eyeColor: person.eyeColor\n      };\n    };\n  }\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}${url}`);\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` + `, received ${res.status}`);\n    }\n    return await res.json();\n  }\n  async getAllPeople() {\n    const res = await this.getResource(`/people/`);\n    return res.results.map(this._transformPerson);\n  }\n  async getPerson(id) {\n    const person = await this.getResource(`/people/${id}/`);\n    return this._transformPerson(person);\n  }\n  async getAllPlanets() {\n    const res = await this.getResource(`/planets/`);\n    return res.results.map(this._transformPlanet);\n  }\n  async getPlanet(id) {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this._transformPlanet(planet);\n  }\n  async getAllStarships() {\n    const res = await this.getResource(`/starships/`);\n    return res.results.map(this._transformStarship);\n  }\n  async getStarship(id) {\n    const starship = this.getResource(`/starships/${id}/`);\n    return this._transformStarship(starship);\n  }\n}\nconst swapi = new SwapiService();\nswapi.getPerson(3).then(p => {\n  console.log(p.name);\n});","map":{"version":3,"names":["SwapiService","_apiBase","_extractId","item","idRegExp","id","planet","url","match","idRegexp","_transformPlanet","name","population","rotationPeriod","rotation_period","diameter","_transformStarship","starship","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","_transformPerson","person","gender","birthYear","eyeColor","getResource","res","fetch","ok","Error","status","json","getAllPeople","results","map","getPerson","getAllPlanets","getPlanet","getAllStarships","getStarship","swapi","then","p","console","log"],"sources":["/Users/katerina/fullstack-hy2020/fullstack-hy2020.github.io/part0/react-star/star/src/services/swapi-service.js"],"sourcesContent":["\nexport default class SwapiService {\n\n_apiBase = 'https://swapi.dev/api';\n\n    async getResource(url) {\n       \n    const res = await fetch(`${this._apiBase}${url}`);\n   \n    if (!res.ok) {\n        throw new Error(`Could not fetch ${url}` + `, received ${res.status}`\n        )}\n        return await res.json(); \n}\n\n    async getAllPeople() {\n       const res = await this.getResource(`/people/`);\n       return res.results.map(this._transformPerson)\n    }\n    async getPerson(id) {\n       const person = await this.getResource(`/people/${id}/`);\n       return this._transformPerson(person);\n    }\n\n    async getAllPlanets() {\n       const res = await this.getResource(`/planets/`);\n       return res.results.map(this._transformPlanet);\n    }\n    async getPlanet(id) {\n       const planet = await this.getResource(`/planets/${id}/`);\n       return this._transformPlanet(planet)\n    }\n\n    async getAllStarships() {\n       const res = await this.getResource(`/starships/`);\n       return res.results.map(this._transformStarship);\n    }\n    async getStarship(id) {\n        const starship = this.getResource(`/starships/${id}/`);\n        return this._transformStarship(starship);\n    }\n\n    _extractId = (item) => {\n\n        const idRegExp = /\\/([0-9]*)\\/$/;\n        const id = planet.url.match(idRegexp)[1];\n    }\n\n    _transformPlanet = (planet) => {\n        \n        return {\n            id: this._extractId(planet),\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter \n        }\n    }\n\n    _transformStarship = (starship) => {\n            return {\n            id: this._extractId(starship),\n            name: starship.name,\n            model: starship.model,\n            manufacturer: starship.manufacturer,\n            costInCredits: starship.costInCredits,\n            length: starship.length,\n            crew: starship.crew,\n            passengers: starship.passengers,\n            cargoCapacity: starship.cargoCapacity\n        }\n    }\n\n    _transformPerson = (person) => {\n            return {\n            id: this._extractId(person),\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birthYear,\n            eyeColor: person.eyeColor,\n        }\n    }\n}\n\nconst swapi = new SwapiService();\n\nswapi.getPerson(3).then((p) => {\n    \n        console.log(p.name);\n})\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}