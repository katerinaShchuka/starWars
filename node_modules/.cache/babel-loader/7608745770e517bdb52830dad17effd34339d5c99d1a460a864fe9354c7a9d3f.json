{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.dev/api';\n    this.getResource = async url => {\n      const res = await fetch(`${this._apiBase}${url}`);\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${url}` + `, received ${res.status}`);\n      }\n      return await res.json();\n    };\n    this.getAllPeople = async () => {\n      const res = await this.getResource(`/people/`);\n      return res.results.map(this._transformPerson).slice(0, 5);\n    };\n    this.getPerson = async id => {\n      const person = await this.getResource(`/people/${id}/`);\n      return this._transformPerson(person);\n    };\n    this.getAllPlanets = async () => {\n      const res = await this.getResource(`/planets/`);\n      return res.results.map(this._transformPlanet).slice(0, 5);\n    };\n    this.getPlanet = async id => {\n      const planet = await this.getResource(`/planets/${id}/`);\n      return this._transformPlanet(planet);\n    };\n    this.getAllStarships = async () => {\n      const res = await this.getResource(`/starships/`);\n      return res.results.map(this._transformStarship).slice(0, 5);\n    };\n    this.getStarship = async id => {\n      const starship = this.getResource(`/starships/${id}/`);\n      return this._transformStarship(starship);\n    };\n    this._extractId = item => {\n      const idRegExp = /\\/([0-9]*)\\/$/;\n      const id = item.url.match(idRegExp)[1];\n    };\n    this._transformPlanet = planet => {\n      return {\n        id: this._extractId(planet),\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n    this._transformStarship = starship => {\n      return {\n        id: this._extractId(starship),\n        name: starship.name,\n        model: starship.model,\n        manufacturer: starship.manufacturer,\n        costInCredits: starship.cost_in_credits,\n        length: starship.length,\n        crew: starship.crew,\n        passengers: starship.passengers,\n        cargoCapacity: starship.cargo_capacity\n      };\n    };\n    this._transformPerson = person => {\n      return {\n        id: this._extractId(person),\n        name: person.name,\n        gender: person.gender,\n        birthYear: person.birth_year,\n        eyeColor: person.eye_color\n      };\n    };\n  }\n}","map":{"version":3,"names":["SwapiService","_apiBase","getResource","url","res","fetch","ok","Error","status","json","getAllPeople","results","map","_transformPerson","slice","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","_extractId","item","idRegExp","match","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","gender","birthYear","birth_year","eyeColor","eye_color"],"sources":["/Users/katerina/starWars/src/components/services/swapi-service.js"],"sourcesContent":["\nexport default class SwapiService {\n\n_apiBase = 'https://swapi.dev/api';\n\n    getResource = async(url) => {\n       \n    const res = await fetch(`${this._apiBase}${url}`);\n   \n    if (!res.ok) {\n        throw new Error(`Could not fetch ${url}` + `, received ${res.status}`\n        )}\n        return await res.json(); \n}\n\n    getAllPeople = async () => {\n       const res = await this.getResource(`/people/`);\n       return res.results\n       .map(this._transformPerson)\n       .slice(0, 5)\n    }\n    getPerson = async(id) => {\n       const person = await this.getResource(`/people/${id}/`);\n       return this._transformPerson(person);\n    }\n\n    getAllPlanets = async() => {\n       const res = await this.getResource(`/planets/`);\n       return res.results\n       .map(this._transformPlanet)\n       .slice(0, 5);\n    }\n    getPlanet = async(id) => {\n       const planet = await this.getResource(`/planets/${id}/`);\n       return this._transformPlanet(planet)\n    }\n\n    getAllStarships = async() => {\n       const res = await this.getResource(`/starships/`);\n       return res.results\n       .map(this._transformStarship)\n       .slice(0, 5);\n    }\n    getStarship = async(id) => {\n        const starship = this.getResource(`/starships/${id}/`);\n        return this._transformStarship(starship);\n    }\n\n    _extractId = (item) => {\n\n        const idRegExp = /\\/([0-9]*)\\/$/;\n        const id = item.url.match(idRegExp)[1];\n    }\n\n    _transformPlanet = (planet) => {\n        \n        return {\n            id: this._extractId(planet),\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter \n        }\n    }\n\n    _transformStarship = (starship) => {\n            return {\n            id: this._extractId(starship),\n            name: starship.name,\n            model: starship.model,\n            manufacturer: starship.manufacturer,\n            costInCredits: starship.cost_in_credits,\n            length: starship.length,\n            crew: starship.crew,\n            passengers: starship.passengers,\n            cargoCapacity: starship.cargo_capacity\n        }\n    }\n\n    _transformPerson = (person) => {\n            return {\n            id: this._extractId(person),\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birth_year,\n            eyeColor: person.eye_color,\n        }\n    }\n}\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}