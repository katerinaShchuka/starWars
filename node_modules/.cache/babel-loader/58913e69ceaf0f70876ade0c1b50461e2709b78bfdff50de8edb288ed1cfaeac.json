{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.dev/api';\n    this._transformPlanet = planet => {\n      return {\n        id: this._extractId(planet),\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n  }\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}${url}`);\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` + `, received ${res.status}`);\n    }\n    return await res.json();\n  }\n  async getAllPeople() {\n    const res = await this.getResource(`/people/`);\n    return res.results.map(this._transformPerson);\n  }\n  async getPerson(id) {\n    const person = await this.getResource(`/people/${id}/`);\n    return this._transformPerson(person);\n  }\n  async getAllPlanets() {\n    const res = await this.getResource(`/planets/`);\n    return res.results.map(this._transformPlanet);\n  }\n  async getPlanet(id) {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this._transformPlanet(planet);\n  }\n  async getAllStarships() {\n    const res = await this.getResource(`/starships/`);\n    return res.results.map(this._transformStarship);\n  }\n  async getStarship(id) {\n    const starship = this.getResource(`/starships/${id}/`);\n    return this._transformStarship(starship);\n  }\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    const id = planet.url.match(idRegexp)[1];\n  }\n  _transformStarship(starship) {\n    return {\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.costInCredits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargoCapacity\n    };\n  }\n  _transformPerson(person) {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birthYear,\n      eyeColor: person.eyeColor\n    };\n  }\n}\nconst swapi = new SwapiService();\nswapi.getPerson(3).then(p => {\n  console.log(p.name);\n});","map":{"version":3,"names":["SwapiService","_apiBase","_transformPlanet","planet","id","_extractId","name","population","rotationPeriod","rotation_period","diameter","getResource","url","res","fetch","ok","Error","status","json","getAllPeople","results","map","_transformPerson","getPerson","person","getAllPlanets","getPlanet","getAllStarships","_transformStarship","getStarship","starship","item","idRegExp","match","idRegexp","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","gender","birthYear","eyeColor","swapi","then","p","console","log"],"sources":["/Users/katerina/fullstack-hy2020/fullstack-hy2020.github.io/part0/react-star/star/src/services/swapi-service.js"],"sourcesContent":["\nexport default class SwapiService {\n\n_apiBase = 'https://swapi.dev/api';\n\n    async getResource(url) {\n       \n    const res = await fetch(`${this._apiBase}${url}`);\n   \n    if (!res.ok) {\n        throw new Error(`Could not fetch ${url}` + `, received ${res.status}`\n        )}\n        return await res.json(); \n}\n\n    async getAllPeople() {\n       const res = await this.getResource(`/people/`);\n       return res.results.map(this._transformPerson)\n    }\n    async getPerson(id) {\n       const person = await this.getResource(`/people/${id}/`);\n       return this._transformPerson(person);\n    }\n\n    async getAllPlanets() {\n       const res = await this.getResource(`/planets/`);\n       return res.results.map(this._transformPlanet);\n    }\n    async getPlanet(id) {\n       const planet = await this.getResource(`/planets/${id}/`);\n       return this._transformPlanet(planet)\n    }\n\n    async getAllStarships() {\n       const res = await this.getResource(`/starships/`);\n       return res.results.map(this._transformStarship);\n    }\n    async getStarship(id) {\n        const starship = this.getResource(`/starships/${id}/`);\n        return this._transformStarship(starship);\n    }\n\n    _extractId(item) {\n\n        const idRegExp = /\\/([0-9]*)\\/$/;\n        const id = planet.url.match(idRegexp)[1];\n    }\n\n    _transformPlanet = (planet) => {\n        \n        return {\n            id: this._extractId(planet),\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter \n        }\n    }\n\n    _transformStarship (starship) {\n            return {\n            id: this._extractId(starship),\n            name: starship.name,\n            model: starship.model,\n            manufacturer: starship.manufacturer,\n            costInCredits: starship.costInCredits,\n            length: starship.length,\n            crew: starship.crew,\n            passengers: starship.passengers,\n            cargoCapacity: starship.cargoCapacity\n        }\n    }\n\n    _transformPerson(person) {\n            return {\n            id: this._extractId(person),\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birthYear,\n            eyeColor: person.eyeColor,\n        }\n    }\n}\n\nconst swapi = new SwapiService();\n\nswapi.getPerson(3).then((p) => {\n    \n        console.log(p.name);\n})\n\n\n\n\n"],"mappings":"AACA,eAAe,MAAMA,YAAY,CAAC;EAAA;IAAA,KAElCC,QAAQ,GAAG,uBAAuB;IAAA,KA6C9BC,gBAAgB,GAAIC,MAAM,IAAK;MAE3B,OAAO;QACHC,EAAE,EAAE,IAAI,CAACC,UAAU,CAACF,MAAM,CAAC;QAC3BG,IAAI,EAAEH,MAAM,CAACG,IAAI;QACjBC,UAAU,EAAEJ,MAAM,CAACI,UAAU;QAC7BC,cAAc,EAAEL,MAAM,CAACM,eAAe;QACtCC,QAAQ,EAAEP,MAAM,CAACO;MACrB,CAAC;IACL,CAAC;EAAA;EApDD,MAAMC,WAAW,CAACC,GAAG,EAAE;IAEvB,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACb,QAAS,GAAEW,GAAI,EAAC,CAAC;IAEjD,IAAI,CAACC,GAAG,CAACE,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAAE,mBAAkBJ,GAAI,EAAC,GAAI,cAAaC,GAAG,CAACI,MAAO,EAAC,CACpE;IAAA;IACD,OAAO,MAAMJ,GAAG,CAACK,IAAI,EAAE;EAC/B;EAEI,MAAMC,YAAY,GAAG;IAClB,MAAMN,GAAG,GAAG,MAAM,IAAI,CAACF,WAAW,CAAE,UAAS,CAAC;IAC9C,OAAOE,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,gBAAgB,CAAC;EAChD;EACA,MAAMC,SAAS,CAACnB,EAAE,EAAE;IACjB,MAAMoB,MAAM,GAAG,MAAM,IAAI,CAACb,WAAW,CAAE,WAAUP,EAAG,GAAE,CAAC;IACvD,OAAO,IAAI,CAACkB,gBAAgB,CAACE,MAAM,CAAC;EACvC;EAEA,MAAMC,aAAa,GAAG;IACnB,MAAMZ,GAAG,GAAG,MAAM,IAAI,CAACF,WAAW,CAAE,WAAU,CAAC;IAC/C,OAAOE,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACnB,gBAAgB,CAAC;EAChD;EACA,MAAMwB,SAAS,CAACtB,EAAE,EAAE;IACjB,MAAMD,MAAM,GAAG,MAAM,IAAI,CAACQ,WAAW,CAAE,YAAWP,EAAG,GAAE,CAAC;IACxD,OAAO,IAAI,CAACF,gBAAgB,CAACC,MAAM,CAAC;EACvC;EAEA,MAAMwB,eAAe,GAAG;IACrB,MAAMd,GAAG,GAAG,MAAM,IAAI,CAACF,WAAW,CAAE,aAAY,CAAC;IACjD,OAAOE,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACO,kBAAkB,CAAC;EAClD;EACA,MAAMC,WAAW,CAACzB,EAAE,EAAE;IAClB,MAAM0B,QAAQ,GAAG,IAAI,CAACnB,WAAW,CAAE,cAAaP,EAAG,GAAE,CAAC;IACtD,OAAO,IAAI,CAACwB,kBAAkB,CAACE,QAAQ,CAAC;EAC5C;EAEAzB,UAAU,CAAC0B,IAAI,EAAE;IAEb,MAAMC,QAAQ,GAAG,eAAe;IAChC,MAAM5B,EAAE,GAAGD,MAAM,CAACS,GAAG,CAACqB,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C;EAaAN,kBAAkB,CAAEE,QAAQ,EAAE;IACtB,OAAO;MACP1B,EAAE,EAAE,IAAI,CAACC,UAAU,CAACyB,QAAQ,CAAC;MAC7BxB,IAAI,EAAEwB,QAAQ,CAACxB,IAAI;MACnB6B,KAAK,EAAEL,QAAQ,CAACK,KAAK;MACrBC,YAAY,EAAEN,QAAQ,CAACM,YAAY;MACnCC,aAAa,EAAEP,QAAQ,CAACO,aAAa;MACrCC,MAAM,EAAER,QAAQ,CAACQ,MAAM;MACvBC,IAAI,EAAET,QAAQ,CAACS,IAAI;MACnBC,UAAU,EAAEV,QAAQ,CAACU,UAAU;MAC/BC,aAAa,EAAEX,QAAQ,CAACW;IAC5B,CAAC;EACL;EAEAnB,gBAAgB,CAACE,MAAM,EAAE;IACjB,OAAO;MACPpB,EAAE,EAAE,IAAI,CAACC,UAAU,CAACmB,MAAM,CAAC;MAC3BlB,IAAI,EAAEkB,MAAM,CAAClB,IAAI;MACjBoC,MAAM,EAAElB,MAAM,CAACkB,MAAM;MACrBC,SAAS,EAAEnB,MAAM,CAACmB,SAAS;MAC3BC,QAAQ,EAAEpB,MAAM,CAACoB;IACrB,CAAC;EACL;AACJ;AAEA,MAAMC,KAAK,GAAG,IAAI7C,YAAY,EAAE;AAEhC6C,KAAK,CAACtB,SAAS,CAAC,CAAC,CAAC,CAACuB,IAAI,CAAEC,CAAC,IAAK;EAEvBC,OAAO,CAACC,GAAG,CAACF,CAAC,CAACzC,IAAI,CAAC;AAC3B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}